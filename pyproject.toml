[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "taskiq-faststream"
description = "FastStream - taskiq integration to schedule FastStream tasks"
readme = "README.md"
authors = [
    { name = "Taskiq team", email = "taskiq@no-reply.com" },
    { name = "Nikita Pastukhov", email = "nikita@pastukhov-dev.com" },
]

keywords = ["taskiq", "tasks", "distributed", "async", "FastStream"]

requires-python = ">=3.8"

classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Topic :: System :: Networking",
    "Typing :: Typed",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Framework :: Pydantic",
    "Framework :: Pydantic :: 1",
    "Framework :: Pydantic :: 2",
]

dynamic = ["version"]

dependencies = [
    "taskiq>=0.10.0,<1.0.0",
    "faststream>=0.3.14,<0.6.0",
]

[project.optional-dependencies]
nats = [
    "faststream[nats]"
]

rabbit = [
    "faststream[rabbit]"
]

kafka = [
    "faststream[kafka]"
]

redis = [
    "faststream[redis]"
]

# local dev
test = [
    "taskiq-faststream[nats]",
    "taskiq-faststream[rabbit]",
    "taskiq-faststream[kafka]",
    "taskiq-faststream[redis]",

    "coverage[toml]>=7.2.0,<8.0.0",
    "pytest>=7.4.0,<9",
]

dev = [
    "taskiq-faststream[test]",

    "mypy>=1.8.0,<1.10.0",
    "ruff==0.4.1",
    "pre-commit >=3.6.0,<4.0.0",
]

[project.urls]
Homepage = "https://github.com/taskiq-python/taskiq-faststream"
Tracker = "https://github.com/taskiq-python/taskiq-faststream/issues"
Source = "https://github.com/taskiq-python/taskiq-faststream"

[tool.hatch.metadata]
allow-direct-references = true
allow-ambiguous-features = true

[tool.hatch.version]
path = "taskiq_faststream/__about__.py"

[tool.hatch.build]
skip-excluded-dirs = true
exclude = [
    "/tests",
    "/.github",
]

[tool.mypy]
python_version = "3.8"
strict = true
ignore_missing_imports = true
allow_subclassing_any = true
allow_untyped_calls = true
pretty = true
show_error_codes = true
implicit_reexport = true
allow_untyped_decorators = true
warn_return_any = false
warn_unused_ignores = false

[tool.isort]
profile = "black"
known_third_party = ["faststream", "taskiq"]

[tool.ruff]
fix = true
target-version = "py38"
line-length = 88
mccabe = { max-complexity = 10 }

# List of enabled rulsets.
# See https://docs.astral.sh/ruff/rules/ for more information.
select = [
    "E",   # Error
    "F",   # Pyflakes
    "W",   # Pycodestyle
    "C90", # McCabe complexity
    "I",   # Isort
    "N",   # pep8-naming
    "D",   # Pydocstyle
    "ANN", # Pytype annotations
    "S",   # Bandit
    "B",   # Bugbear
    "COM", # Commas
    "C4",  # Comprehensions
    "ISC", # Implicit string concat
    "PIE", # Unnecessary code
    "T20", # Catch prints
    "UP",  # pyupgrade
    "PERF",# perfomance checks
    "PYI", # validate pyi files
    "Q",   # Checks for quotes
    "RSE", # Checks raise statements
    "RET", # Checks return statements
    "SLF", # Self checks
    "SIM", # Simplificator
    "PTH", # Pathlib checks
    "ERA", # Checks for commented out code
    "PL",  # PyLint checks
    "RUF", # Specific to Ruff checks
]
ignore = [
    "D105",    # Missing docstring in magic method
    "D107",    # Missing docstring in __init__
    "D212",    # Multi-line docstring summary should start at the first line
    "D401",    # First line should be in imperative mood
    "D104",    # Missing docstring in public package
    "D100",    # Missing docstring in public module
    "ANN102",  # Missing type annotation for self in method
    "ANN101",  # Missing type annotation for argument
    "ANN401",  # typing.Any are disallowed in `**kwargs
    "PLR0913", # Too many arguments for function call
    "D106",    # Missing docstring in public nested class
    "COM812",
    "ISC001",
]
exclude = [".venv/"]

[tool.ruff.per-file-ignores]
"tests/*" = [
    "S101", # Use of assert detected
    "S301", # Use of pickle detected
    "D103", # Missing docstring in public function
    "SLF001", # Private member accessed
    "S311", # Standard pseudo-random generators are not suitable for security/cryptographic purposes
    "D101", # Missing docstring in public class
]

[tool.ruff.pydocstyle]
convention = "google"
ignore-decorators = ["typing.overload"]

[tool.ruff.pylint]
allow-magic-value-types = ["int", "str", "float"]

[tool.ruff.flake8-bugbear]
extend-immutable-calls = []

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-q"
testpaths = [
    "tests",
]

[tool.coverage.run]
parallel = true
branch = true
concurrency = [
    "multiprocessing",
    "thread"
]
source = [
    "taskiq_faststream",
    "tests"
]
context = '${CONTEXT}'
omit = [
    "**/__init__.py",
]

[tool.coverage.report]
show_missing = true
skip_empty = true
exclude_also = [
    "if __name__ == .__main__.:",
    "self.logger",
    "def __repr__",
    "lambda: None",
    "from .*",
    "import .*",
    '@(abc\.)?abstractmethod',
    "raise NotImplementedError",
    'raise AssertionError',
    'raise ValueError',
    'logger\..*',
    "pass",
    '\.\.\.',
]
omit = [
    '*/__about__.py',
    '*/__main__.py',
    '*/__init__.py',
]
